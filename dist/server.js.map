{"version":3,"sources":["../server/server.js"],"names":["install","app","use","static","json","db","get","req","res","collection","find","toArray","then","issues","metadata","total_count","length","_metadata","records","catch","error","console","log","status","message","post","newIssue","body","created","Date","err","validateIssue","insertOne","doc","_id","insertedId","limit","next","connect","connection","listen"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;;;AAEA;;AAEA;;;;;;AAHA;AAIA,2BAAiBA,OAAjB;AAFA;;;AAKA,MAAMC,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQ,kBAAQC,MAAR,CAAe,QAAf,CAAR;AACAF,IAAIC,GAAJ,CAAQ,qBAAWE,IAAX,EAAR;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,IAAIC,EAAJ;;AAEAJ,IAAIK,GAAJ,CAAQ,cAAR,EAAwB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAClCH,OAAGI,UAAH,CAAc,QAAd,EAAwBC,IAAxB,GAA+BC,OAA/B,GAAyCC,IAAzC,CAA8CC,UAAU;AACpD,cAAMC,WAAW,EAACC,aAAaF,OAAOG,MAArB,EAAjB;AACAR,YAAIJ,IAAJ,CAAS,EAACa,WAAWH,QAAZ,EAAsBI,SAASL,MAA/B,EAAT;AACH,KAHD,EAGGM,KAHH,CAGSC,SAAS;AACdC,gBAAQC,GAAR,CAAYF,KAAZ;AACAZ,YAAIe,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB,EAACoB,SAAU,0BAAyBJ,KAAM,EAA1C,EAArB;AACH,KAND;AAOH,CARD;;AAUAnB,IAAIwB,IAAJ,CAAS,aAAT,EAAwB,CAAClB,GAAD,EAAMC,GAAN,KAAc;AAClC,UAAMkB,WAAWnB,IAAIoB,IAArB;AACAD,aAASE,OAAT,GAAmB,IAAIC,IAAJ,EAAnB;AACA,QAAG,CAACH,SAASH,MAAb,EAAoB;AAChBG,iBAASH,MAAT,GAAkB,KAAlB;AACH;AACD,UAAMO,MAAM,gBAAMC,aAAN,CAAoBL,QAApB,CAAZ;AACA,QAAGI,GAAH,EAAO;AACHtB,YAAIe,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB,EAACoB,SAAU,oBAAmBM,GAAI,EAAlC,EAArB;AACA;AACH;;AAEDzB,OAAGI,UAAH,CAAc,QAAd,EAAwBuB,SAAxB,CAAkCN,QAAlC,EAA4Cd,IAA5C,CAAiDqB,OAC7C5B,GAAGI,UAAH,CAAc,QAAd,EAAwBC,IAAxB,CAA6B,EAACwB,KAAKD,IAAIE,UAAV,EAA7B,EAAoDC,KAApD,CAA0D,CAA1D,EAA6DC,IAA7D,EADJ,EAEEzB,IAFF,CAEOc,YAAY;AACflB,YAAIJ,IAAJ,CAASsB,QAAT;AACH,KAJD,EAIGP,KAJH,CAISC,SAAS;AACdC,gBAAQC,GAAR,CAAYF,KAAZ;AACAZ,YAAIe,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB,EAACoB,SAAU,0BAAyBJ,KAAM,EAA1C,EAArB;AACH,KAPD;AAQH,CApBD;;AAwBA,qBAAYkB,OAAZ,CAAoB,kCAApB,EAAwD1B,IAAxD,CAA6D2B,cAAc;AACvElC,SAAKkC,UAAL;AACAtC,QAAIuC,MAAJ,CAAW,IAAX,EAAiB,MAAM;AACnBnB,gBAAQC,GAAR,CAAY,0BAAZ;AACH,KAFD;AAGH,CALD,EAKGH,KALH,CAKSW,OAAO;AACZT,YAAQC,GAAR,CAAY,QAAZ,EAAsBQ,GAAtB;AACH,CAPD","file":"server.js","sourcesContent":["import express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport {MongoClient} from 'mongodb';\r\nimport Issue from './issue.js';\r\n//Necessary for transfiling of es2015\r\nimport 'babel-polyfill';\r\n//Necessary for Node.js to report line numbers of source file instead of the compiled file\r\nimport SourceMapSupport from 'source-map-support';\r\nSourceMapSupport.install();\r\n\r\n\r\nconst app = express();\r\napp.use(express.static('static'));\r\napp.use(bodyParser.json());\r\n\r\n// if(process.env.NODE_ENV !== 'production'){\r\n//     const webpack = require('webpack');\r\n//     const webpackDevMiddleware = require('webpack-dev-middleware');\r\n//     const webpackHotMiddleware = require('webpack-hot-middleware');\r\n\r\n//     const config = require('../webpack.config');\r\n//     config.entry.app.push('webpack-hot-middleware/client',\r\n//             'webpack/hot/only-dev-server');\r\n//     config.plugins.push(new webpack.HotModuleReplacementPlugin());\r\n    \r\n//     const bundler = webpack(config);\r\n//     app.use(webpackDevMiddleware(bundler, {noInfo: true}));\r\n//     app.use(webpackHotMiddleware(bundler, {log: console.log}));\r\n// }\r\n\r\nlet db;\r\n\r\napp.get('/api/issues/', (req, res) => {\r\n    db.collection('issues').find().toArray().then(issues => {\r\n        const metadata = {total_count: issues.length}\r\n        res.json({_metadata: metadata, records: issues});\r\n    }).catch(error => {\r\n        console.log(error);\r\n        res.status(500).json({message: `Internal Server Error: ${error}`});\r\n    });\r\n});\r\n\r\napp.post('/api/issues', (req, res) => {\r\n    const newIssue = req.body;\r\n    newIssue.created = new Date();\r\n    if(!newIssue.status){\r\n        newIssue.status = 'New';\r\n    }\r\n    const err = Issue.validateIssue(newIssue);\r\n    if(err){\r\n        res.status(422).json({message: `Invalid request: ${err}`});\r\n        return;\r\n    }\r\n\r\n    db.collection('issues').insertOne(newIssue).then(doc => \r\n        db.collection('issues').find({_id: doc.insertedId}).limit(1).next()\r\n    ).then(newIssue => {\r\n        res.json(newIssue);\r\n    }).catch(error => {\r\n        console.log(error);\r\n        res.status(500).json({message: `Internal Server Error: ${error}`});\r\n    });\r\n});\r\n\r\n\r\n\r\nMongoClient.connect('mongodb://localhost/issuetracker').then(connection => {\r\n    db = connection;\r\n    app.listen(3000, () => {\r\n        console.log('App started on port 3000');\r\n    });\r\n}).catch(err => {\r\n    console.log('ERROR:', err);\r\n});"]}